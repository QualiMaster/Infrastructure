<?xml version="1.0" encoding="UTF-8"?>
<project name="CoordinationLayer" default="jar" basedir="." xmlns:jacoco="antlib:org.jacoco.ant"
    xmlns:artifact="antlib:org.apache.maven.artifact.ant">
	<!-- import of the global Jenkins properties -->
	<property file="${user.home}/global-build.properties"/>
    <property file="${user.home}/qualimaster-build.properties"/>

    <include file="${user.home}/macros.xml"/>
    
	<!-- Settings for the project -->
	<property name="src.dir" value="src"/>
	<property name="javacSource" value="1.7"/>
	<property name="javacTarget" value="1.7"/>
	
    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
        <classpath path="${jacoco.path}/jacocoant.jar"/>
    </taskdef>
	
    <!-- Check - no typedef shall be required as installed in ANT/lib -->
    <path id="maven-ant-tasks.classpath" path="${ant-maven.lib}" />
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
       uri="antlib:org.apache.maven.artifact.ant"
       classpathref="maven-ant-tasks.classpath" />
    
	<path id ="includes">
        <!-- all taken from maven -->
	</path>

	<!-- force snapshot update - does not work in macros.xml  -->
    <artifact:remoteRepository id="qm.repository" url="${maven.repository}">
        <snapshots updatePolicy="always" />
    </artifact:remoteRepository>
		
	<!-- Targets  -->
	<target name="init">
		<!-- Delete generated folders -->
		<delete dir="${build.base.dir}"/>
		
		<!-- Create folders -->
        <mkdir dir="${build.base.dir}"/>
		<mkdir dir="${build.classes.dir}"/>
		<mkdir dir="${build.jar.dir}"/>
		
        <artifact:dependencies pathId="maven.compile.classpath">
            <pom file="pom.xml" id="pom"/>
            <remoteRepository refid="qm.repository" />
        </artifact:dependencies>		
	</target>
	
	<!-- Compile all files without test classes -->
	<target name="compile" depends="init">
		<javac srcdir="${src.dir}" debug="on" destdir="${build.classes.dir}" includeAntRuntime="no" failonerror="true" source="${javacSource}" target="${javacTarget}" encoding="${javac.encoding}">
          <classpath refid="maven.compile.classpath" />
          <classpath refid="includes" />
		</javac>
    </target>
    
	<!-- Tests -->
    <target name="test" depends="compile">
      <jacoco:coverage output="file" destfile="jacoco.exec" excludes="backtype.*:org.apache.thrift7.*">
        <junit printsummary="withOutAndErr" dir="${build.base.dir}" fork="true" timeout="700000" showoutput="yes">
            <classpath>
                <path refid="maven.compile.classpath" />
                <path refid="includes" />
                <pathelement location="${build.classes.dir}" />
            </classpath>
            <test name="tests.eu.qualimaster.coordination.AllTests" haltonfailure="no" outfile="result">
                <formatter type="xml" />
            </test>
            <jvmarg value="-Dqm.base.dir=${libs.qualimaster.coordinationLayer.dir}"/>
        	<jvmarg value="-Dtest.exclude.hosts=${test.exclude.hosts}"/>
            <env key="STORM_TEST_TIMEOUT_MS" value="20000"/>
          </junit>
      </jacoco:coverage>
      
		<jacoco:report>
		    <executiondata>
		        <file file="jacoco.exec"/>
		    </executiondata>
		    <structure name="Example Project">
		        <classfiles>
		            <fileset dir="${build.classes.dir}"/>
		        </classfiles>
		    </structure>
		    <html destdir="report"/>
		</jacoco:report>      
    </target>

    <!-- Javadoc -->
    <target name="javadoc" depends="compile">
        <javadoc access="public" author="true" destdir="doc" doctitle="QualiMaster CoordinationLayer" nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false" source="1.7" sourcepath="src" splitindex="true" use="true" version="true">
          <classpath refid="maven.compile.classpath" />
          <classpath refid="includes" />
          <packageset dir="src" defaultexcludes="yes">
            <include name="eu/qualimaster/**"/>
          </packageset>
        </javadoc>
    </target>
	
	<!-- Create jar files -->
	<target name="jar" depends="test, javadoc">
		<jar destfile="${build.jar.dir}/${ant.project.name}.jar" 
		    basedir="${build.classes.dir}" excludes="tests/**"/>
        <jar destfile="${build.jar.dir}/${ant.project.name}-tests.jar" 
            basedir="${build.classes.dir}" includes="tests/** testdata/**"/>
        <jar destfile="${build.jar.dir}/${ant.project.name}-sources.jar" 
            basedir="${src.dir}"/>
        
        <!-- <artifact:install file="${build.jar.dir}/${ant.project.name}.jar">
            <pom refid="pom"/>
        </artifact:install>-->
        
        <mvnDeploy folderName="${ant.project.name}" jarFolder="${build.jar.dir}" jarFile="${ant.project.name}.jar"/>
    </target>
	
</project>
